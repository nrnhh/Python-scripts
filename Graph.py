import oracledb
import pandas as pd
import matplotlib.pyplot as plt
from io import BytesIO
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import CommandHandler, MessageHandler, filters, ApplicationBuilder, ContextTypes, ConversationHandler, CallbackQueryHandler
import logging
from datetime import datetime, timedelta
from openpyxl import Workbook
from openpyxl.utils.dataframe import dataframe_to_rows
from openpyxl.styles import Border, Side, PatternFill, Font, Alignment

# Loglama qurmaq
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# Sabitl…ôr v…ô konfiqurasiya
custom_colors = ['red', 'blue', 'green', 'black', 'purple', 'orange', 'darkblue', 'darkgreen', 'brown', 'crimson', 'navy', 'darkred']

chat_id = '-1003177573983'
bot_token = "8386936045:AAE18mrqRK9SxgDjj0nbglv5B5sxH1Waaxo"
PASSIVE_DOCTOR_LINK = "https://t.me/+pVPrA77Eq08xOWZi"

# oracledb.init_oracle_client(lib_dir="/opt/oracle/instantclient_23_6")
oracledb.init_oracle_client(lib_dir=r"C:\instant\instantclient_23_9")
username = "NURAN"
password = "Nuran..2024!!"
dsn = "172.18.79.23:1521/FONETAZ"

# ConversationHandler v…ôziyy…ôtl…ôri
MAIN_MENU, ASK_DOCTOR, SELECT_DATE_RANGE, CONTINUE_DOCTOR, TOP_10_DATE, EXPORT_PROMPT, SELECT_SPECIALTY, SELECT_STAT_TYPE = range(8)

# SQL sorƒüularƒ± (D…ôyi≈üilm…ôyib)
query_template_specific = """
SELECT * FROM (
    SELECT
        '{tip}' AS TIP,
        T.{persid_col} AS HEKIM_ID,
        MAX(P.P_AD || ' ' || P.P_SOYAD) AS HEKIM_ADI,
        TO_CHAR(T.HI_TARIH, 'YYYY-MM') AS AY,
        EXTRACT(YEAR FROM T.HI_TARIH) AS YEAR_,
        EXTRACT(MONTH FROM T.HI_TARIH) AS MONTH_,
        COUNT(DISTINCT CASE WHEN T.HK_HASTATURU LIKE '%Ayaktan%' THEN T.HK_KODU END) AS AYAKTAN,
        COUNT(DISTINCT CASE WHEN T.HK_HASTATURU LIKE '%Yatan%' THEN T.HK_KODU END) AS YATAN
    FROM FONETHBYS.V_IST_GENEL_HIZMET T
    LEFT JOIN FONETHBYSADM.H_PERSON P ON T.{persid_col} = P.P_ID
    WHERE T.{persid_col} = (SELECT P_ID FROM FONETHBYSADM.H_PERSON WHERE P_KODU = :kod)
        AND T.HI_TARIH BETWEEN TO_DATE(:start_date,'DD.MM.YYYY') AND TO_DATE(:end_date,'DD.MM.YYYY')
    GROUP BY T.{persid_col}, TO_CHAR(T.HI_TARIH, 'YYYY-MM'), EXTRACT(YEAR FROM T.HI_TARIH), EXTRACT(MONTH FROM T.HI_TARIH)
)
ORDER BY YEAR_, MONTH_
"""

query_template_lab_specific = """
SELECT * FROM (
    SELECT
        '{tip}' AS TIP,
        T.{persid_col} AS HEKIM_ID,
        MAX(P.P_AD || ' ' || P.P_SOYAD) AS HEKIM_ADI,
        TO_CHAR(T.HI_TARIH, 'YYYY-MM') AS AY,
        EXTRACT(YEAR FROM T.HI_TARIH) AS YEAR_,
        EXTRACT(MONTH FROM T.HI_TARIH) AS MONTH_,
        COUNT(DISTINCT CASE WHEN T.HK_HASTATURU LIKE '%Ayaktan%' THEN T.HK_KODU END) AS AYAKTAN,
        COUNT(DISTINCT CASE WHEN T.HK_HASTATURU LIKE '%Yatan%' THEN T.HK_KODU END) AS YATAN
    FROM FONETHBYS.V_IST_GENEL_HIZMET T
    LEFT JOIN FONETHBYSADM.H_PERSON P ON T.{persid_col} = P.P_ID
    WHERE T.{persid_col} = (SELECT P_ID FROM FONETHBYSADM.H_PERSON WHERE P_KODU = :kod)
        AND LOWER(T.ISLEMGRUPADI) LIKE '%lab%'
        AND T.HI_TARIH BETWEEN TO_DATE(:start_date,'DD.MM.YYYY') AND TO_DATE(:end_date,'DD.MM.YYYY')
    GROUP BY T.{persid_col}, TO_CHAR(T.HI_TARIH, 'YYYY-MM'), EXTRACT(YEAR FROM T.HI_TARIH), EXTRACT(MONTH FROM T.HI_TARIH)
)
ORDER BY YEAR_, MONTH_
"""

query_template_specialty = """
SELECT
    TO_CHAR(A.TARIH, 'Month YYYY', 'NLS_DATE_LANGUAGE = AZERBAIJANI') AS AY_ADI,
    A.DOKTOR_ADI,
    A.HK_HASTATURU,
    A.ISLEMGRUPADI,
    A.UNVAN,
    SUM(A.EDEN_SAYISI) AS EDEN_SAYISI,
    SUM(A.GONDEREN_SAYISI) AS GONDEREN_SAYISI
FROM (
    -- Eden (xidm…ôti ver…ôn) h…ôkiml…ôr
    SELECT
        TRUNC(T.HI_TARIH, 'MM') AS TARIH,
        YP.P_AD || ' ' || YP.P_SOYAD AS DOKTOR_ADI,
        T.HK_HASTATURU,
        T.ISLEMGRUPADI,
        PU.PU_UNVAN AS UNVAN,
        COUNT(DISTINCT T.HK_ID) AS EDEN_SAYISI,
        0 AS GONDEREN_SAYISI
    FROM FONETHBYS.V_IST_GENEL_HIZMET T
    LEFT JOIN FONETHBYSADM.H_PERSON YP ON T.YPERSID = YP.P_ID
    LEFT JOIN FONETHBYSADM.H_PUNVAN PU ON YP.P_UNVANID = PU.PU_ID
    WHERE T.HI_TARIH BETWEEN TO_DATE(:start_date, 'DD.MM.YYYY') AND TO_DATE(:end_date, 'DD.MM.YYYY')
        AND YP.P_UNVANID = :pu_id
    GROUP BY TRUNC(T.HI_TARIH, 'MM'), YP.P_AD, YP.P_SOYAD, T.HK_HASTATURU, T.ISLEMGRUPADI, PU.PU_UNVAN
    UNION ALL
    -- G√∂nd…ôr…ôn h…ôkiml…ôr
    SELECT
        TRUNC(T.HI_TARIH, 'MM') AS TARIH,
        IP.P_AD || ' ' || IP.P_SOYAD AS DOKTOR_ADI,
        T.HK_HASTATURU,
        T.ISLEMGRUPADI,
        PU.PU_UNVAN AS UNVAN,
        0 AS EDEN_SAYISI,
        COUNT(DISTINCT T.HK_ID) AS GONDEREN_SAYISI
    FROM FONETHBYS.V_IST_GENEL_HIZMET T
    LEFT JOIN FONETHBYSADM.H_PERSON IP ON T.IPERSID = IP.P_ID
    LEFT JOIN FONETHBYSADM.H_PUNVAN PU ON IP.P_UNVANID = PU.PU_ID
    WHERE T.HI_TARIH BETWEEN TO_DATE(:start_date, 'DD.MM.YYYY') AND TO_DATE(:end_date, 'DD.MM.YYYY')
        AND IP.P_UNVANID = :pu_id
    GROUP BY TRUNC(T.HI_TARIH, 'MM'), IP.P_AD, IP.P_SOYAD, T.HK_HASTATURU, T.ISLEMGRUPADI, PU.PU_UNVAN
) A
GROUP BY A.TARIH, A.DOKTOR_ADI, A.HK_HASTATURU, A.ISLEMGRUPADI, A.UNVAN
ORDER BY A.TARIH, A.DOKTOR_ADI, A.HK_HASTATURU, A.ISLEMGRUPADI
"""

top_10_queries = {
    "eden_ayaktan": """
        SELECT * FROM (
            SELECT
                MAX(P.P_AD || ' ' || P.P_SOYAD) AS HEKIM_ADI,
                P.P_KODU,
                COUNT(DISTINCT T.HK_KODU) AS AYAKTAN,
                0 AS YATAN,
                COUNT(DISTINCT T.HK_KODU) AS CEMI
            FROM FONETHBYS.V_IST_GENEL_HIZMET T
            LEFT JOIN FONETHBYSADM.H_PERSON P ON T.YPERSID = P.P_ID
            WHERE T.HK_HASTATURU LIKE '%Ayaktan%'
                AND T.HI_TARIH BETWEEN TO_DATE(:start_date, 'DD.MM.YYYY') AND TO_DATE(:end_date, 'DD.MM.YYYY')
                AND P.P_UNVANID = :pu_id
            GROUP BY P.P_KODU
            ORDER BY CEMI DESC
        ) WHERE ROWNUM <= 10
    """,
    "eden_yatan": """
        SELECT * FROM (
            SELECT
                MAX(P.P_AD || ' ' || P.P_SOYAD) AS HEKIM_ADI,
                P.P_KODU,
                0 AS AYAKTAN,
                COUNT(DISTINCT T.HK_KODU) AS YATAN,
                COUNT(DISTINCT T.HK_KODU) AS CEMI
            FROM FONETHBYS.V_IST_GENEL_HIZMET T
            LEFT JOIN FONETHBYSADM.H_PERSON P ON T.YPERSID = P.P_ID
            WHERE T.HK_HASTATURU LIKE '%Yatan%'
                AND T.HI_TARIH BETWEEN TO_DATE(:start_date, 'DD.MM.YYYY') AND TO_DATE(:end_date, 'DD.MM.YYYY')
                AND P.P_UNVANID = :pu_id
            GROUP BY P.P_KODU
            ORDER BY CEMI DESC
        ) WHERE ROWNUM <= 10
    """,
    "gonderen_ayaktan": """
        SELECT * FROM (
            SELECT
                MAX(P.P_AD || ' ' || P.P_SOYAD) AS HEKIM_ADI,
                P.P_KODU,
                COUNT(DISTINCT T.HK_KODU) AS AYAKTAN,
                0 AS YATAN,
                COUNT(DISTINCT T.HK_KODU) AS CEMI
            FROM FONETHBYS.V_IST_GENEL_HIZMET T
            LEFT JOIN FONETHBYSADM.H_PERSON P ON T.IPERSID = P.P_ID
            WHERE T.HK_HASTATURU LIKE '%Ayaktan%'
                AND T.HI_TARIH BETWEEN TO_DATE(:start_date, 'DD.MM.YYYY') AND TO_DATE(:end_date, 'DD.MM.YYYY')
                AND P.P_UNVANID = :pu_id
            GROUP BY P.P_KODU
            ORDER BY CEMI DESC
        ) WHERE ROWNUM <= 10
    """,
    "gonderen_yatan": """
        SELECT * FROM (
            SELECT
                MAX(P.P_AD || ' ' || P.P_SOYAD) AS HEKIM_ADI,
                P.P_KODU,
                0 AS AYAKTAN,
                COUNT(DISTINCT T.HK_KODU) AS YATAN,
                COUNT(DISTINCT T.HK_KODU) AS CEMI
            FROM FONETHBYS.V_IST_GENEL_HIZMET T
            LEFT JOIN FONETHBYSADM.H_PERSON P ON T.IPERSID = P.P_ID
            WHERE T.HK_HASTATURU LIKE '%Yatan%'
                AND T.HI_TARIH BETWEEN TO_DATE(:start_date, 'DD.MM.YYYY') AND TO_DATE(:end_date, 'DD.MM.YYYY')
                AND P.P_UNVANID = :pu_id
            GROUP BY P.P_KODU
            ORDER BY CEMI DESC
        ) WHERE ROWNUM <= 10
    """,
    "lab_gonderen_ayaktan": """
        SELECT * FROM (
            SELECT
                MAX(P.P_AD || ' ' || P.P_SOYAD) AS HEKIM_ADI,
                P.P_KODU,
                COUNT(DISTINCT T.HK_KODU) AS AYAKTAN,
                0 AS YATAN,
                COUNT(DISTINCT T.HK_KODU) AS CEMI
            FROM FONETHBYS.V_IST_GENEL_HIZMET T
            LEFT JOIN FONETHBYSADM.H_PERSON P ON T.IPERSID = P.P_ID
            WHERE LOWER(T.ISLEMGRUPADI) LIKE '%lab%'
                AND T.HK_HASTATURU LIKE '%Ayaktan%'
                AND T.HI_TARIH BETWEEN TO_DATE(:start_date, 'DD.MM.YYYY') AND TO_DATE(:end_date, 'DD.MM.YYYY')
                AND P.P_UNVANID = :pu_id
            GROUP BY P.P_KODU
            ORDER BY CEMI DESC
        ) WHERE ROWNUM <= 10
    """,
    "lab_gonderen_yatan": """
        SELECT * FROM (
            SELECT
                MAX(P.P_AD || ' ' || P.P_SOYAD) AS HEKIM_ADI,
                P.P_KODU,
                0 AS AYAKTAN,
                COUNT(DISTINCT T.HK_KODU) AS YATAN,
                COUNT(DISTINCT T.HK_KODU) AS CEMI
            FROM FONETHBYS.V_IST_GENEL_HIZMET T
            LEFT JOIN FONETHBYSADM.H_PERSON P ON T.IPERSID = P.P_ID
            WHERE LOWER(T.ISLEMGRUPADI) LIKE '%lab%'
                AND T.HK_HASTATURU LIKE '%Yatan%'
                AND T.HI_TARIH BETWEEN TO_DATE(:start_date, 'DD.MM.YYYY') AND TO_DATE(:end_date, 'DD.MM.YYYY')
                AND P.P_UNVANID = :pu_id
            GROUP BY P.P_KODU
            ORDER BY CEMI DESC
        ) WHERE ROWNUM <= 10
    """
}

# Menyu d√ºym…ôl…ôri (D…ôyi≈üilm…ôyib)
def get_main_menu():
    keyboard = [
        [InlineKeyboardButton("üìà Statistik Qrafikl…ôr (F…ôrdi)", callback_data='menu_stats')],
        [InlineKeyboardButton("üìÖ Tarix…ô g√∂r…ô Analiz (Qayƒ±t)", callback_data='menu_date')],
        [
            InlineKeyboardButton("üèÜ TOP 10 Eden Ayaktan", callback_data='menu_top10_eden_ayaktan'),
            InlineKeyboardButton("üèÜ TOP 10 Eden Yatan", callback_data='menu_top10_eden_yatan')
        ],
        [
            InlineKeyboardButton("üèÜ TOP 10 Gonderen Ayaktan", callback_data='menu_top10_gonderen_ayaktan'),
            InlineKeyboardButton("üèÜ TOP 10 Gonderen Yatan", callback_data='menu_top10_gonderen_yatan')
        ],
        [
            InlineKeyboardButton("üèÜ TOP 10 Lab Gonderen Ayaktan", callback_data='menu_top10_lab_ayaktan'),
            InlineKeyboardButton("üèÜ TOP 10 Lab Gonderen Yatan", callback_data='menu_top10_lab_yatan')
        ],
        [InlineKeyboardButton("üë®‚Äç‚öïÔ∏è Pe≈ü…ôy…ô g√∂r…ô H…ôkiml…ôr", callback_data='menu_specialty')],
        [InlineKeyboardButton("‚ùå Passiv H…ôkiml…ôr", callback_data='menu_passive')], 
        [InlineKeyboardButton("üìä Excel ƒ∞xrac", callback_data='menu_excel')],
        [InlineKeyboardButton("üîÅ Yeni Se√ßim", callback_data='menu_reset')]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_persistent_keyboard():
    keyboard = [[KeyboardButton("/start")]]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_date_range_buttons():
    keyboard = [
        [InlineKeyboardButton("3 Aylƒ±q", callback_data='date_3m')],
        [InlineKeyboardButton("6 Aylƒ±q", callback_data='date_6m')],
        [InlineKeyboardButton("1 ƒ∞llik", callback_data='date_1y')],
        [InlineKeyboardButton("Ana menyuya qayƒ±t", callback_data='return_main_menu')]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_continue_buttons(last_action):
    keyboard = [
        [
            InlineKeyboardButton("Ba≈üqa h…ôkim …ôlav…ô et (H…ô)", callback_data='continue_yes'),
            InlineKeyboardButton("Bitir (Yox)", callback_data='continue_no')
        ],
        # Yalnƒ±z f…ôrdi axtarƒ±≈ü (manual) rejimind…ô tarix d…ôyi≈üm…ôy…ô imkan veririk
        *([
            [InlineKeyboardButton("üìÖ Tarix Aralƒ±ƒüƒ±nƒ± D…ôyi≈ü", callback_data='back_to_date_range_manual')]
        ] if last_action == 'manual' else []),
        [InlineKeyboardButton("Ana menyuya qayƒ±t", callback_data='return_main_menu')]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_export_prompt_buttons(last_action):
    keyboard = [
        [
            InlineKeyboardButton("üìä Excel olaraq g√∂nd…ôr (H…ô)", callback_data='export_yes'),
            InlineKeyboardButton("Ana menyuya qayƒ±t (Yox)", callback_data='return_main_menu')
        ],
        # Yalnƒ±z f…ôrdi axtarƒ±≈ü (manual) rejimind…ô tarix d…ôyi≈üm…ôy…ô imkan veririk
        *([
            [InlineKeyboardButton("üìÖ Tarix Aralƒ±ƒüƒ±nƒ± D…ôyi≈ü", callback_data='back_to_date_range_manual')]
        ] if last_action == 'manual' else [])
    ]
    return InlineKeyboardMarkup(keyboard)

def get_specialty_buttons(specialties):
    keyboard = []
    for i in range(0, len(specialties), 2):
        row = [InlineKeyboardButton(specialties[i]['PU_UNVAN'], callback_data=f'specialty_{specialties[i]["PU_ID"]}')]
        if i + 1 < len(specialties):
            row.append(InlineKeyboardButton(specialties[i + 1]['PU_UNVAN'], callback_data=f'specialty_{specialties[i + 1]["PU_ID"]}'))
        keyboard.append(row)
    keyboard.append([InlineKeyboardButton("Ana menyuya qayƒ±t", callback_data='return_main_menu')])
    return InlineKeyboardMarkup(keyboard)

def get_stat_type_buttons():
    # D√ºz…ôli≈ü edilmi≈ü funksiya
    keyboard = [
        [InlineKeyboardButton("Umumi Statistika", callback_data='stat_umumi')],
        [
            InlineKeyboardButton("Eden Ayaktan", callback_data='stat_eden_ayaktan'),
            InlineKeyboardButton("Eden Yatan", callback_data='stat_eden_yatan')
        ],
        [
            InlineKeyboardButton("Gonderen Ayaktan", callback_data='stat_gonderen_ayaktan'),
            InlineKeyboardButton("Gonderen Yatan", callback_data='stat_gonderen_yatan')
        ],
        [
            InlineKeyboardButton("Lab Gonderen Ayaktan", callback_data='stat_lab_gonderen_ayaktan'),
            InlineKeyboardButton("Lab Gonderen Yatan", callback_data='stat_lab_gonderen_yatan')
        ],
        [
            InlineKeyboardButton("Tarix aralƒ±ƒüƒ±nƒ± d…ôyi≈ü", callback_data='back_to_date_range'),
            InlineKeyboardButton("Pe≈ü…ô d…ôyi≈ü", callback_data='back_to_specialty')
        ],
        [InlineKeyboardButton("Ana menyuya qayƒ±t", callback_data='return_main_menu')]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_return_main_menu_button():
    keyboard = [[InlineKeyboardButton("Ana menyuya qayƒ±t", callback_data='return_main_menu')]]
    return InlineKeyboardMarkup(keyboard)

# Start funksiyasƒ± (D…ôyi≈üilm…ôyib)
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"Received command or message from chat_id: {update.effective_chat.id}, message_id: {update.message.message_id}, text: {update.message.text}")
    context.user_data.clear()
    context.user_data['kodlar'] = []
    context.user_data['adlar'] = []
    try:
        await update.effective_chat.send_message(
            "Salam! üë®‚Äç‚öïÔ∏è H…ôkim statistikasƒ± botuna xo≈ü g…ôldiniz!\n"
            "Z…ôhm…ôt olmasa, a≈üaƒüƒ±dakƒ± menyudan bir se√ßim edin.",
            reply_markup=get_main_menu(),
            reply_to_message_id=update.message.message_id
        )
        await update.effective_chat.send_message(
            "Botu yenid…ôn ba≈ülatmaq √º√ß√ºn /start istifad…ô edin.",
            reply_markup=get_persistent_keyboard(),
            reply_to_message_id=update.message.message_id
        )
        logger.info("Bot ba≈ülatƒ±ldƒ±, ana menyu g√∂st…ôrildi.")
        return MAIN_MENU
    except Exception as e:
        logger.error(f"Error in start function: {e}")
        await update.effective_chat.send_message(
            f"X…ôta ba≈ü verdi: {e}\nYenid…ôn c…ôhd edin v…ô ya /start istifad…ô edin.",
            reply_markup=get_main_menu(),
            reply_to_message_id=update.message.message_id
        )
        return MAIN_MENU

# TOP 10 h…ôkim funksiyasƒ± (D…ôyi≈üilm…ôyib)
async def top_10_doctors(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("top_10_doctors funksiyasƒ± √ßaƒüƒ±rƒ±ldƒ±.")

    category = context.user_data.get('top10_category', 'eden_ayaktan')
    pu_id = context.user_data.get('specialty_id')
    specialty_name = context.user_data.get('specialty_name', 'Pe≈ü…ô')
    start_date = context.user_data['start_date']
    end_date = context.user_data['end_date']

    category_names = {
        'eden_ayaktan': 'Eden Ayaktan',
        'eden_yatan': 'Eden Yatan',
        'gonderen_ayaktan': 'Gonderen Ayaktan',
        'gonderen_yatan': 'Gonderen Yatan',
        'lab_gonderen_ayaktan': 'Lab Gonderen Ayaktan',
        'lab_gonderen_yatan': 'Lab Gonderen Yatan'
    }
    category_name = category_names[category]

    metric_config = {
        'eden_ayaktan': 'AYAKTAN',
        'eden_yatan': 'YATAN',
        'gonderen_ayaktan': 'AYAKTAN',
        'gonderen_yatan': 'YATAN',
        'lab_gonderen_ayaktan': 'AYAKTAN',
        'lab_gonderen_yatan': 'YATAN'
    }
    display_metric = metric_config[category]
    metric_label = 'Ayaktan' if display_metric == 'AYAKTAN' else 'Yatan'

    logger.info(f"Tarix aralƒ±ƒüƒ±: {start_date} - {end_date}, Pe≈ü…ô: {specialty_name} (PU_ID: {pu_id})")

    try:
        logger.info("Veril…ônl…ôr bazasƒ±na qo≈üulur...")
        with oracledb.connect(user=username, password=password, dsn=dsn) as conn:
            logger.info(f"TOP 10 {category_name} sorƒüusu icra olunur...")
            top_10_df = pd.read_sql(
                top_10_queries[category],
                con=conn,
                params={"start_date": start_date, "end_date": end_date, "pu_id": int(pu_id)}
            )

            if top_10_df.empty:
                logger.warning(f"{start_date} - {end_date} tarixl…ôri √º√ß√ºn {specialty_name} pe≈ü…ôsind…ô {category_name} m…ôlumat tapƒ±lmadƒ±.")
                await update.effective_chat.send_message(
                    f"‚ö†Ô∏è {specialty_name} pe≈ü…ôsi √º√ß√ºn {start_date} - {end_date} tarixl…ôri arasƒ±nda {category_name} m…ôlumat tapƒ±lmadƒ±.\n"
                    "Z…ôhm…ôt olmasa, ba≈üqa bir pe≈ü…ô v…ô ya tarix aralƒ±ƒüƒ± se√ßin.",
                    reply_markup=get_return_main_menu_button(),
                    reply_to_message_id=update.effective_message.message_id
                )
                return MAIN_MENU

            logger.info(f"TOP 10 DataFrame: {top_10_df[['P_KODU', 'HEKIM_ADI']].to_dict()}")
            top_10_df = top_10_df[top_10_df['P_KODU'].notnull() & (top_10_df['P_KODU'] != '')]

            if top_10_df.empty:
                logger.warning(f"{start_date} - {end_date} tarixl…ôri √º√ß√ºn {specialty_name} pe≈ü…ôsind…ô {category_name} etibarlƒ± P_KODU tapƒ±lmadƒ±.")
                await update.effective_chat.send_message(
                    f"‚ö†Ô∏è {specialty_name} pe≈ü…ôsi √º√ß√ºn {start_date} - {end_date} tarixl…ôri arasƒ±nda {category_name} etibarlƒ± h…ôkim kodu tapƒ±lmadƒ±.\n"
                    "Z…ôhm…ôt olmasa, ba≈üqa bir pe≈ü…ô v…ô ya tarix aralƒ±ƒüƒ± se√ßin.",
                    reply_markup=get_return_main_menu_button(),
                    reply_to_message_id=update.effective_message.message_id
                )
                return MAIN_MENU

            msg = f"üèÜ TOP 10 {category_name} ({specialty_name}, {start_date} - {end_date})\n\n"
            for idx, row in top_10_df.iterrows():
                msg += f"{idx + 1}. {row['HEKIM_ADI']}\n"
                msg += f"    {metric_label}: {int(row[display_metric])}\n"
                msg += f"    C…ômi: {int(row['CEMI'])}\n\n"

            context.user_data['kodlar'] = top_10_df['P_KODU'].tolist()
            context.user_data['adlar'] = top_10_df['HEKIM_ADI'].tolist()
            context.user_data['last_action'] = 'top10'
            logger.info(f"TOP 10 {category_name} h…ôkiml…ôri saxlanƒ±ldƒ±: {context.user_data['adlar']}")

            await update.effective_chat.send_message(
                msg,
                reply_to_message_id=update.effective_message.message_id
            )
            logger.info(f"TOP 10 {category_name} siyahƒ±sƒ± g√∂nd…ôrildi.")

            await update.effective_chat.send_message(
                f"üìä TOP 10 {category_name} h…ôkiml…ôr √º√ß√ºn qrafik hazƒ±rlanƒ±r, z…ôhm…ôt olmasa g√∂zl…ôyin...",
                reply_to_message_id=update.effective_message.message_id
            )
            logger.info(f"{category_name} qrafiki yaradƒ±lƒ±r...")
            await generate_graph(update, context)

            await update.effective_chat.send_message(
                f"üìä TOP 10 {category_name} statistikasƒ±nƒ± Excel olaraq g√∂nd…ôrilsin mi?\n"
                "H…ô: Excel faylƒ± g√∂nd…ôril…ôc…ôk.\nYox: Ana menyuya qayƒ±dacaqsƒ±nƒ±z.",
                reply_markup=get_export_prompt_buttons(context.user_data['last_action']),
                reply_to_message_id=update.effective_message.message_id
            )
            return EXPORT_PROMPT

    except Exception as e:
        logger.error(f"top_10_doctors x…ôtasƒ± ({category_name}): {e}")
        await update.effective_chat.send_message(
            f"X…ôta ba≈ü verdi: {e}\nZ…ôhm…ôt olmasa, ana menyudan yeni bir se√ßim edin.",
            reply_markup=get_return_main_menu_button(),
            reply_to_message_id=update.effective_message.message_id
        )
        return MAIN_MENU

# Excel ixrac funksiyasƒ± (∆èSAS D∆èYƒ∞≈ûƒ∞KLƒ∞KL∆èR)
async def export_to_excel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("export_to_excel funksiyasƒ± √ßaƒüƒ±rƒ±ldƒ±.")

    start_date = context.user_data.get('start_date', (datetime.now() - timedelta(days=180)).strftime('%d.%m.%Y'))
    end_date = context.user_data.get('end_date', datetime.now().strftime('%d.%m.%Y'))
    category = context.user_data.get('top10_category', 'hekim')
    specialty_name = context.user_data.get('specialty_name', 'Pe≈ü…ô')
    last_action = context.user_data.get('last_action')
    category_names = {
        'eden_ayaktan': 'Eden Ayaktan',
        'eden_yatan': 'Eden Yatan',
        'gonderen_ayaktan': 'G√∂nd…ôr…ôn Ayaktan',
        'gonderen_yatan': 'G√∂nd…ôr…ôn Yatan',
        'lab_gonderen_ayaktan': 'Laboratoriya G√∂nd…ôr…ôn Ayaktan',
        'lab_gonderen_yatan': 'Laboratoriya G√∂nd…ôr…ôn Yatan',
        'hekim': 'H…ôkim',
        'specialty': specialty_name
    }
    
    # Ba≈ülƒ±q √º√ß√ºn kateqoriya adƒ±
    if last_action == 'top10':
        category_name = f"TOP 10 {category_names.get(category, 'H…ôkim')}"
    elif last_action == 'specialty':
        category_name = f"Pe≈ü…ô ({specialty_name}) statistikasƒ±"
    else:
        category_name = 'F…ôrdi H…ôkim'

    try:
        if last_action == 'specialty' and 'specialty_df' in context.user_data:
            # Pe≈ü…ô statistikasƒ± √º√ß√ºn sad…ô DataFrame ixracƒ±
            df = context.user_data['specialty_df'].copy()
            df.rename(columns={'AY_ADI': 'Ay / Pe≈ü…ô', 'DOKTOR_ADI': 'H…ôkim Adƒ±', 'HK_HASTATURU': 'Xidm…ôt N√∂v√º', 
                               'ISLEMGRUPADI': 'Qrup Adƒ±', 'UNVAN': 'Pe≈ü…ô', 
                               'EDEN_SAYISI': 'Eden (Xidm…ôt Sayƒ±)', 'GONDEREN_SAYISI': 'G√∂nd…ôr…ôn Sayƒ±'}, inplace=True)
            df = df[['Ay / Pe≈ü…ô', 'H…ôkim Adƒ±', 'Xidm…ôt N√∂v√º', 'Qrup Adƒ±', 'Pe≈ü…ô', 'Eden (Xidm…ôt Sayƒ±)', 'G√∂nd…ôr…ôn Sayƒ±']].fillna(0)

            # Pe≈ü…ô statistikasƒ±nƒ± ayrƒ±ca Excel faylƒ± kimi g√∂nd…ôr
            buffer = BytesIO()
            with pd.ExcelWriter(buffer, engine='openpyxl') as writer:
                df.to_excel(writer, sheet_name='Pe≈ü…ô Statistikasƒ±', index=False)
            
            buffer.seek(0)
            file_name = f"statistikasi_{category}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
            await context.bot.send_document(
                chat_id=update.effective_chat.id,
                document=buffer,
                filename=file_name,
                caption=f"üìä {start_date} - {end_date} tarixl…ôri √º√ß√ºn {category_name} statistikasƒ±",
                reply_to_message_id=update.effective_message.message_id
            )
            
            await update.effective_chat.send_message(
                "‚úÖ Excel faylƒ± g√∂nd…ôrildi!\nN√∂vb…ôti addƒ±m: Ana menyudan yeni bir se√ßim ed…ô bil…ôrsiniz.",
                reply_markup=get_return_main_menu_button(),
                reply_to_message_id=update.effective_message.message_id
            )
            return MAIN_MENU
        
        # F…ôrdi v…ô TOP 10 √º√ß√ºn m√ºr…ôkk…ôb formatlama (Ayrƒ± Sheetl…ôr v…ô Pivot)
        else:
            if not context.user_data.get('kodlar'):
                raise ValueError("H…ôkim se√ßilm…ôyib.")
            
            with oracledb.connect(user=username, password=password, dsn=dsn) as conn:
                query_sources = [
                    ("Eden-isci", "YPERSID", query_template_specific),
                    ("Gonderen-isci", "IPERSID", query_template_specific),
                    ("Gonderen-LAB", "IPERSID", query_template_lab_specific)
                ]

                all_data = []
                for kod, ad in zip(context.user_data['kodlar'], context.user_data['adlar']):
                    if kod is None or not isinstance(kod, str) or not kod.strip(): continue
                    for tip, persid_col, template in query_sources:
                        query = template.format(tip=tip, persid_col=persid_col)
                        df_temp = pd.read_sql(query, con=conn, params={"kod": kod.strip(), "start_date": start_date, "end_date": end_date})
                        if not df_temp.empty:
                            df_temp['HEKIM_ADI'] = ad # H…ôkim Adƒ±nƒ± …ôlav…ô et
                            all_data.append(df_temp)

                if not all_data:
                    raise ValueError("Se√ßilmi≈ü h…ôkiml…ôr √º√ß√ºn m…ôlumat tapƒ±lmadƒ±.")

                df_raw = pd.concat(all_data, ignore_index=True)
                df_raw.rename(columns={'TIP': 'M…ôlumat Tipi', 'HEKIM_ADI': 'H…ôkim Adƒ±', 'AY': 'Ay', 
                                       'AYAKTAN': 'Ayaktan Sayƒ±', 'YATAN': 'Yatan Sayƒ±', 
                                       'YEAR_': 'ƒ∞l', 'MONTH_': 'Ay_Reqem'}, inplace=True)
                
                
                # --- YATAN V∆è AYAKTAN M∆èLUMATLARININ AYRI QURUPLA≈ûDIRILMASI V∆è M∆èLUMATIN T∆èKRARLANMASI ---
                all_qroups = []
                
                # 1. AYAKTAN m…ôlumatlarƒ± olan s…ôtirl…ôri ayƒ±r (Ayaktan Sayƒ± > 0 olan s…ôtirl…ôr)
                df_ayaktan = df_raw[df_raw['Ayaktan Sayƒ±'] > 0].copy()
                if not df_ayaktan.empty:
                    df_ayaktan['Qrup_Adƒ±'] = df_ayaktan['M…ôlumat Tipi'].str.replace('-isci', '').str.replace('-', '') + ' - AYAKTAN'
                    df_ayaktan['Value'] = df_ayaktan['Ayaktan Sayƒ±']
                    all_qroups.append(df_ayaktan[['H…ôkim Adƒ±', 'Ay', 'ƒ∞l', 'Ay_Reqem', 'Qrup_Adƒ±', 'Value']].copy())
                
                # 2. YATAN m…ôlumatlarƒ± olan s…ôtirl…ôri ayƒ±r (Yatan Sayƒ± > 0 olan s…ôtirl…ôr)
                df_yatan = df_raw[df_raw['Yatan Sayƒ±'] > 0].copy()
                if not df_yatan.empty:
                    df_yatan['Qrup_Adƒ±'] = df_yatan['M…ôlumat Tipi'].str.replace('-isci', '').str.replace('-', '') + ' - YATAN'
                    df_yatan['Value'] = df_yatan['Yatan Sayƒ±']
                    all_qroups.append(df_yatan[['H…ôkim Adƒ±', 'Ay', 'ƒ∞l', 'Ay_Reqem', 'Qrup_Adƒ±', 'Value']].copy())
                
                # 3. B√ºt√ºn Ayaktan v…ô Yatan m…ôlumatlarƒ±nƒ± birl…ô≈üdir
                if not all_qroups:
                     raise ValueError("Se√ßilmi≈ü h…ôkiml…ôr √º√ß√ºn he√ß bir f…ôaliyy…ôt m…ôlumatƒ± tapƒ±lmadƒ± (Ayaktan v…ô Yatan yoxdur).")
                
                df_final = pd.concat(all_qroups, ignore_index=True)
                df_final['Ay_Adi'] = df_final['Ay'].apply(lambda x: datetime.strptime(str(x), '%Y-%m').strftime('%B %Y'))

                # Openpyxl il…ô formatla≈üdƒ±rma
                buffer = BytesIO()
                wb = Workbook()
                wb.remove(wb.active) # Default sheeti silirik

                thin_border = Border(left=Side(style='thin'), 
                                     right=Side(style='thin'), 
                                     top=Side(style='thin'), 
                                     bottom=Side(style='thin'))
                header_fill = PatternFill(start_color="31869B", end_color="31869B", fill_type="solid") # T√ºnd Mavi
                total_fill = PatternFill(start_color="C6EFCE", end_color="C6EFCE", fill_type="solid") # A√ßƒ±q Ya≈üƒ±l
                header_font = Font(bold=True, color="FFFFFF")
                title_font = Font(bold=True, size=14)
                
                # qrup_adi-ni for d√∂vr…ôsind…ôn k…ônarda t…ôyin etm…ôk √º√ß√ºn, d…ôy…ôrini saxlayƒ±rƒ±q (∆èsas…ôn Pe≈ü…ô Stat-da lazƒ±m olur)
                last_qrup_adi = "" 

                # H…ôr bir tip v…ô xidm…ôt n√∂v√º √º√ß√ºn ayrƒ± sheet yarat
                for qrup_adi, df_g in df_final.groupby('Qrup_Adƒ±'):
                    last_qrup_adi = qrup_adi # D…ôy…ôri saxla
                    
                    is_ayaktan = 'AYAKTAN' in qrup_adi
                    value_metric = 'Ayaktan Sayƒ±' if is_ayaktan else 'Yatan Sayƒ±'

                    pivot_df = df_g.pivot_table(index='H…ôkim Adƒ±', columns='Ay_Adi', values='Value', aggfunc='sum', fill_value=0)
                    
                    if pivot_df.empty: continue

                    # C…ôm s√ºtunu …ôlav…ô et
                    pivot_df['C∆èMƒ∞'] = pivot_df.sum(axis=1)

                    # C…ôm s…ôtri …ôlav…ô et (TOPLAM)
                    total_row = pd.DataFrame(pivot_df.sum(axis=0)).T
                    total_row.index = ['TOPLAM']
                    
                    pivot_df = pd.concat([pivot_df, total_row], ignore_index=False)
                    
                    # Aylarƒ± d√ºzg√ºn sƒ±rayla almaq √º√ß√ºn sƒ±ralayƒ±rƒ±q
                    aylar_sirasiz = df_g[['Ay_Adi', 'ƒ∞l', 'Ay_Reqem']].drop_duplicates().sort_values(['ƒ∞l', 'Ay_Reqem'])
                    aylar_sirasi = aylar_sirasiz['Ay_Adi'].tolist() + ['C∆èMƒ∞']
                    pivot_df = pivot_df.reindex(columns=aylar_sirasi)
                    
                    # Sheet adƒ±nƒ± yarat
                    sheet_name = qrup_adi.replace(' - ', '_').replace(' ', '_').replace('Gonderen_LAB', 'LAB_GOND')[:31]
                    ws = wb.create_sheet(sheet_name)
                    
                    # 1-ci s…ôtir: Ba≈ülƒ±ƒüƒ± …ôlav…ô et v…ô formatla≈üdƒ±r
                    ws.cell(row=1, column=1, value=f"Statistika: {qrup_adi} ({start_date} - {end_date})")
                    ws.merge_cells(start_row=1, start_column=1, end_row=1, end_column=len(aylar_sirasi) + 1)
                    ws['A1'].font = title_font
                    ws['A1'].alignment = Alignment(horizontal='center', vertical='center')
                    
                    # 2-ci s…ôtir: S√ºtun ba≈ülƒ±qlarƒ±nƒ± yaz
                    ws.append(['H…ôkim Adƒ±'] + list(pivot_df.columns))
                    
                    # 3-c√º s…ôtird…ôn: Datalarƒ± yaz
                    rows = dataframe_to_rows(pivot_df.reset_index().rename(columns={'index': 'H…ôkim Adƒ±'}), header=False, index=False)
                    for r_idx, row in enumerate(rows, 3):
                        ws.append(row)

                    # Formatla≈üdƒ±rma
                    # S√ºtun ba≈ülƒ±qlarƒ± √º√ß√ºn format (indiki 2-ci s…ôtir)
                    for cell in ws[2]:
                        cell.border = thin_border
                        cell.fill = header_fill
                        cell.font = header_font
                        cell.alignment = Alignment(horizontal='center', vertical='center', wrap_text=True)

                    # M…ôlumat v…ô TOPLAM s…ôtirl…ôri √º√ß√ºn format
                    for row_cells in ws.iter_rows(min_row=3, max_row=ws.max_row, min_col=1, max_col=ws.max_column):
                        is_total_row = (row_cells[0].value == 'TOPLAM')
                        
                        for cell in row_cells:
                            cell.border = thin_border
                            cell.alignment = Alignment(horizontal='center', vertical='center', wrap_text=True)

                            if is_total_row:
                                cell.fill = total_fill
                                cell.font = Font(bold=True)
                            
                            # H…ôkim Adƒ± s√ºtununu sola hizala
                            if cell.column == 1:
                                cell.alignment = Alignment(horizontal='left', vertical='center', wrap_text=True)
                                
                    # S√ºtun enlikl…ôrini t…ônziml…ô (Oxunaqlƒ± olmasƒ± √º√ß√ºn)
                    dims = {}
                    for row in ws.rows:
                        for cell in row:
                            if cell.value:
                                dims[cell.column_letter] = max((dims.get(cell.column_letter, 0), len(str(cell.value))))
                    for col, value in dims.items():
                        ws.column_dimensions[col].width = value + 3


                wb.save(buffer)
                buffer.seek(0)
                file_name = f"Statistika_detalli_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"

                await context.bot.send_document(
                    chat_id=update.effective_chat.id,
                    document=buffer,
                    filename=file_name,
                    caption=f"üìä {start_date} - {end_date} tarixl…ôri √º√ß√ºn {category_name} statistikasƒ± (Detallƒ± format)",
                    reply_to_message_id=update.effective_message.message_id
                )
                
                await update.effective_chat.send_message(
                    "‚úÖ Excel faylƒ± uƒüurla g√∂nd…ôrildi v…ô formatla≈üdƒ±rƒ±ldƒ±!\nN√∂vb…ôti addƒ±m: Ana menyudan yeni bir se√ßim ed…ô bil…ôrsiniz.",
                    reply_markup=get_return_main_menu_button(),
                    reply_to_message_id=update.effective_message.message_id
                )
                return MAIN_MENU


    except Exception as e:
        logger.error(f"export_to_excel x…ôtasƒ±: {e}")
        await update.effective_chat.send_message(
            f"X…ôta ba≈ü verdi: {e}\nZ…ôhm…ôt olmasa, ana menyudan yeni bir se√ßim edin.",
            reply_markup=get_return_main_menu_button(),
            reply_to_message_id=update.effective_message.message_id
        )
        return MAIN_MENU

# Qrafik generasiya (D…ôyi≈üilm…ôyib)
async def generate_graph(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("generate_graph funksiyasƒ± √ßaƒüƒ±rƒ±ldƒ±.")

    start_date = context.user_data.get('start_date', (datetime.now() - timedelta(days=180)).strftime('%d.%m.%Y'))
    end_date = context.user_data.get('end_date', datetime.now().strftime('%d.%m.%Y'))
    category = context.user_data.get('top10_category', 'hekim')
    specialty_name = context.user_data.get('specialty_name', 'Pe≈ü…ô')
    category_names = {
        'eden_ayaktan': 'Eden Ayaktan',
        'eden_yatan': 'Eden Yatan',
        'gonderen_ayaktan': 'Gonderen Ayaktan',
        'gonderen_yatan': 'Gonderen Yatan',
        'lab_gonderen_ayaktan': 'Lab Gonderen Ayaktan',
        'lab_gonderen_yatan': 'Lab Gonderen Yatan',
        'hekim': 'H…ôkim',
        'specialty': specialty_name
    }
    category_name = category_names[category]

    if not context.user_data.get('kodlar'):
        logger.warning("H…ôkim se√ßilm…ôyib.")
        await update.effective_chat.send_message(
            "‚ö†Ô∏è He√ß bir h…ôkim se√ßilm…ôyib. ∆èvv…ôlc…ô h…ôkim …ôlav…ô edin v…ô ya TOP 10 kateqoriyasƒ± se√ßin.",
            reply_markup=get_return_main_menu_button(),
            reply_to_message_id=update.effective_message.message_id
        )
        return MAIN_MENU

    try:
        logger.info(f"Generating graphs for category: {category_name}, doctors: {context.user_data['adlar']}")
        with oracledb.connect(user=username, password=password, dsn=dsn) as conn:
            category_config = {
                'eden_ayaktan': ('Eden-isci', 'YPERSID', query_template_specific, 'AYAKTAN'),
                'eden_yatan': ('Eden-isci', 'YPERSID', query_template_specific, 'YATAN'),
                'gonderen_ayaktan': ('Gonderen-isci', 'IPERSID', query_template_specific, 'AYAKTAN'),
                'gonderen_yatan': ('Gonderen-isci', 'IPERSID', query_template_specific, 'YATAN'),
                'lab_gonderen_ayaktan': ('Gonderen-LAB', 'IPERSID', query_template_lab_specific, 'AYAKTAN'),
                'lab_gonderen_yatan': ('Gonderen-LAB', 'IPERSID', query_template_lab_specific, 'YATAN'),
                'hekim': None,
                'specialty': None
            }

            if category in ['hekim', 'specialty']:
                query_sources = [
                    ("Eden-isci", "YPERSID", query_template_specific),
                    ("Gonderen-isci", "IPERSID", query_template_specific),
                    ("Gonderen-LAB", "IPERSID", query_template_lab_specific)
                ]
                combined_data = {}
                for tip, persid_col, _ in query_sources:
                    for col in ["AYAKTAN", "YATAN"]:
                        combined_data[(tip, col)] = pd.DataFrame()
            else:
                tip, persid_col, template, metric = category_config[category]
                query_sources = [(tip, persid_col, template)]
                combined_data = {(tip, metric): pd.DataFrame()}

            for kod, ad in zip(context.user_data['kodlar'], context.user_data['adlar']):
                for tip, persid_col, template in query_sources:
                    query = template.format(tip=tip, persid_col=persid_col)
                    logger.info(f"Executing query for doctor {ad} ({kod}), type {tip}")
                    df = pd.read_sql(query, con=conn, params={"kod": kod.strip(), "start_date": start_date, "end_date": end_date})
                    if df.empty:
                        logger.info(f"No data found for {ad} ({kod}) in {tip}")
                        continue
                    logger.info(f"Data retrieved for {ad} ({kod}) in {tip}: {df.shape[0]} rows")
                    for col in (["AYAKTAN", "YATAN"] if category in ['hekim', 'specialty'] else [category_config[category][3]]):
                        temp_df = df[["AY", col]].copy()
                        temp_df.rename(columns={col: ad}, inplace=True)
                        if combined_data.get((tip, col)) is not None:
                            if combined_data[(tip, col)].empty:
                                combined_data[(tip, col)] = temp_df
                            else:
                                combined_data[(tip, col)] = pd.merge(combined_data[(tip, col)], temp_df, on="AY", how="outer")

            if not any(df_plot.shape[0] > 0 for df_plot in combined_data.values()):
                logger.warning(f"{start_date} - {end_date} tarixl…ôri √º√ß√ºn {category_name} qrafik m…ôlumatƒ± tapƒ±lmadƒ±.")
                await update.effective_chat.send_message(
                    f"‚ö†Ô∏è Se√ßilmi≈ü h…ôkiml…ôr √º√ß√ºn {start_date} - {end_date} tarixl…ôri arasƒ±nda {category_name} m…ôlumat tapƒ±lmadƒ±.",
                    reply_markup=get_return_main_menu_button(),
                    reply_to_message_id=update.effective_message.message_id
                )
                return MAIN_MENU

            for (tip, col), df_plot in combined_data.items():
                if not df_plot.empty:
                    logger.info(f"Generating graph for {tip} - {col}, rows: {df_plot.shape[0]}")
                    df_plot = df_plot.sort_values(by="AY")
                    plt.figure(figsize=(12, 6))
                    for idx, hekim in enumerate(df_plot.columns[1:]):
                        color = custom_colors[idx % len(custom_colors)]
                        plt.plot(df_plot["AY"], df_plot[hekim], marker='o', linewidth=2, label=f"{hekim} (c…ômi: {int(df_plot[hekim].sum())})", color=color)
                        for x, y in zip(df_plot["AY"], df_plot[hekim]):
                            if pd.notnull(y):
                                plt.annotate(str(int(y)), (x, y), textcoords="offset points", xytext=(0, 8), ha='center',
                                             fontsize=8, color=color, weight='bold')
                    title = f"TOP 10 {category_name} ‚Äì {col} Statistikasƒ± ({start_date} - {end_date})" if category not in ['hekim', 'specialty'] else f"{tip} ‚Äì {col} M√ºqayis…ôli Qrafik ({start_date} - {end_date})"
                    plt.title(title)
                    plt.xlabel("Ay")
                    plt.ylabel("Say")
                    plt.xticks(rotation=45)
                    plt.legend()
                    plt.tight_layout()

                    buffer = BytesIO()
                    plt.savefig(buffer, format='png')
                    buffer.seek(0)
                    caption = f"TOP 10 {category_name} ‚Äì {col} Statistikasƒ±" if category not in ['hekim', 'specialty'] else f"{tip} ‚Äì {col} Statistikasƒ±"
                    await context.bot.send_photo(
                        chat_id=update.effective_chat.id,
                        photo=buffer,
                        caption=caption,
                        reply_to_message_id=update.effective_message.message_id
                    )
                    buffer.close()
                    plt.close()
                    logger.info(f"{tip} ‚Äì {col} qrafiki g√∂nd…ôrildi ({category_name}).")

            context.user_data['last_action'] = 'manual' if category == 'hekim' else 'top10'
            await update.effective_chat.send_message(
                f"üìä {category_name} statistikasƒ±nƒ± Excel olaraq g√∂nd…ôrilsin mi?\n"
                "H…ô: Excel faylƒ± g√∂nd…ôril…ôc…ôk.\nYox: Ana menyuya qayƒ±dacaqsƒ±nƒ±z.",
                reply_markup=get_export_prompt_buttons(context.user_data['last_action']),
                reply_to_message_id=update.effective_message.message_id
            )
            return EXPORT_PROMPT

    except Exception as e:
        logger.error(f"generate_graph x…ôtasƒ± ({category_name}): {e}")
        await update.effective_chat.send_message(
            f"X…ôta ba≈ü verdi: {e}\nZ…ôhm…ôt olmasa, ana menyudan yeni bir se√ßim edin.",
            reply_markup=get_return_main_menu_button(),
            reply_to_message_id=update.effective_message.message_id
        )
        return MAIN_MENU

# Pe≈ü…ôy…ô g√∂r…ô qrafik generasiyasƒ± (D…ôyi≈üilm…ôyib)
async def generate_specialty_graph(update: Update, context: ContextTypes.DEFAULT_TYPE, stat_type: str):
    logger.info(f"generate_specialty_graph funksiyasƒ± √ßaƒüƒ±rƒ±ldƒ±: {stat_type}")

    df = context.user_data.get('specialty_df')
    start_date = context.user_data.get('start_date')
    end_date = context.user_data.get('end_date')
    specialty_name = context.user_data.get('specialty_name', 'Pe≈ü…ô')

    stat_types = {
        'eden_ayaktan': ('Eden Ayaktan', 'EDEN_SAYISI', lambda x: x['HK_HASTATURU'].str.contains('Ayaktan', case=False, na=False) & (x['EDEN_SAYISI'] > 0)),
        'eden_yatan': ('Eden Yatan', 'EDEN_SAYISI', lambda x: x['HK_HASTATURU'].str.contains('Yatan', case=False, na=False) & (x['EDEN_SAYISI'] > 0)),
        'gonderen_ayaktan': ('G√∂nd…ôr…ôn Ayaktan', 'GONDEREN_SAYISI', lambda x: x['HK_HASTATURU'].str.contains('Ayaktan', case=False, na=False) & (x['GONDEREN_SAYISI'] > 0)),
        'gonderen_yatan': ('G√∂nd…ôr…ôn Yatan', 'GONDEREN_SAYISI', lambda x: x['HK_HASTATURU'].str.contains('Yatan', case=False, na=False) & (x['GONDEREN_SAYISI'] > 0)),
        'lab_gonderen_ayaktan': ('Laboratoriya G√∂nd…ôr…ôn Ayaktan', 'GONDEREN_SAYISI', lambda x: x['HK_HASTATURU'].str.contains('Ayaktan', case=False, na=False) & x['ISLEMGRUPADI'].str.contains('lab', case=False, na=False) & (x['GONDEREN_SAYISI'] > 0)),
        'lab_gonderen_yatan': ('Laboratoriya G√∂nd…ôr…ôn Yatan', 'GONDEREN_SAYISI', lambda x: x['HK_HASTATURU'].str.contains('Yatan', case=False, na=False) & x['ISLEMGRUPADI'].str.contains('lab', case=False, na=False) & (x['GONDEREN_SAYISI'] > 0))
    }

    if df is None or df.empty:
        logger.warning(f"{specialty_name} √º√ß√ºn qrafik m…ôlumatƒ± yoxdur.")
        await update.effective_chat.send_message(
            f"‚ö†Ô∏è {specialty_name} pe≈ü…ôsi √º√ß√ºn {start_date} - {end_date} tarixl…ôri arasƒ±nda m…ôlumat tapƒ±lmadƒ±.\n"
            "Ana menyudan yeni bir se√ßim edin.",
            reply_markup=get_return_main_menu_button(),
            reply_to_message_id=update.effective_message.message_id
        )
        return MAIN_MENU

    try:
        context.user_data['last_action'] = 'specialty' # Excel √º√ß√ºn

        if stat_type == 'specialty':  # √úmumi Statistika
            graphs_generated_count = 0
            for stat_key, (category_name, metric, filter_func) in stat_types.items():
                df_filtered = df[filter_func(df)].copy()
                if not df_filtered.empty:
                    await generate_single_graph(update, context, df_filtered, category_name, metric, start_date, end_date, specialty_name)
                    graphs_generated_count += 1
            
            if graphs_generated_count == 0:
                await update.effective_chat.send_message(
                    f"‚ö†Ô∏è {specialty_name} pe≈ü…ôsi √º√ß√ºn se√ßilmi≈ü b√ºt√ºn alt kateqoriyalarda (√úmumi Statistika) m…ôlumat tapƒ±lmadƒ±.",
                    reply_to_message_id=update.effective_message.message_id
                )
        else:  # Specific statistic type
            category_name, metric, filter_func = stat_types[stat_type]
            df_filtered = df[filter_func(df)].copy()
            if df_filtered.empty:
                logger.warning(f"{specialty_name} √º√ß√ºn {category_name} m…ôlumatƒ± yoxdur.")
                await update.effective_chat.send_message(
                    f"‚ö†Ô∏è {specialty_name} pe≈ü…ôsi √º√ß√ºn {category_name} m…ôlumat tapƒ±lmadƒ±.",
                    reply_to_message_id=update.effective_message.message_id
                )
            else:
                await generate_single_graph(update, context, df_filtered, category_name, metric, start_date, end_date, specialty_name)

        # Excel ixrac sorƒüusu
        await prompt_excel_export(update, context, specialty_name)
        return EXPORT_PROMPT

    except Exception as e:
        logger.error(f"generate_specialty_graph x…ôtasƒ± ({specialty_name}, {stat_type}): {e}")
        await update.effective_chat.send_message(
            f"X…ôta ba≈ü verdi: {e}\nN√∂vb…ôti addƒ±m: Ba≈üqa bir pe≈ü…ô se√ßin v…ô ya ana menyuya qayƒ±dƒ±n.",
            reply_markup=get_specialty_buttons(context.user_data.get('specialties', [])),
            reply_to_message_id=update.effective_message.message_id
        )
        return SELECT_SPECIALTY

# Helper function to generate individual graphs (D…ôyi≈üilm…ôyib)
async def generate_single_graph(update: Update, context: ContextTypes.DEFAULT_TYPE, df_filtered, category_name, metric, start_date, end_date, specialty_name):
    df_filtered['TARIH'] = pd.to_datetime(df_filtered['AY_ADI'], format='%B %Y', errors='coerce', dayfirst=False)
    df_filtered = df_filtered.sort_values('TARIH')
    pivot_df = df_filtered.pivot_table(
        values=metric,
        index='AY_ADI',
        columns='DOKTOR_ADI',
        aggfunc='sum',
        fill_value=0
    )

    if not pivot_df.empty:
        pivot_df.index = pd.Categorical(
            pivot_df.index,
            categories=df_filtered['AY_ADI'].unique(),
            ordered=True
        )
        pivot_df = pivot_df.sort_index()

        plt.figure(figsize=(12, 6))
        for idx, hekim in enumerate(pivot_df.columns):
            color = custom_colors[idx % len(custom_colors)]
            plt.plot(pivot_df.index, pivot_df[hekim], marker='o', linewidth=2,
                     label=f"{hekim} (c…ômi: {int(pivot_df[hekim].sum())})", color=color)
            for x, y in zip(pivot_df.index, pivot_df[hekim]):
                if y > 0:
                    plt.annotate(str(int(y)), (x, y), textcoords="offset points", xytext=(0, 8),
                                 ha='center', fontsize=8, color=color, weight='bold')

        title = f"{specialty_name} ‚Äì {category_name} Statistikasƒ± ({start_date} - {end_date})"
        plt.title(title)
        plt.xlabel("Ay")
        plt.ylabel("Xidm…ôt Sayƒ±" if metric == 'EDEN_SAYISI' else "G√∂nd…ôr…ôn Say")
        plt.xticks(rotation=45, ha='right')
        plt.legend()
        plt.tight_layout()

        buffer = BytesIO()
        plt.savefig(buffer, format='png')
        buffer.seek(0)
        await context.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo=buffer,
            caption=f"{specialty_name} ‚Äì {category_name} Statistikasƒ±",
            reply_to_message_id=update.effective_message.message_id
        )
        buffer.close()
        plt.close()
        logger.info(f"{specialty_name} ‚Äì {category_name} qrafiki g√∂nd…ôrildi.")

# Helper function to prompt Excel export (D…ôyi≈üilm…ôyib)
async def prompt_excel_export(update: Update, context: ContextTypes.DEFAULT_TYPE, specialty_name):
    await update.effective_chat.send_message(
        f"üìä {specialty_name} statistikasƒ±nƒ± Excel olaraq g√∂nd…ôrilsin mi?\n"
        "H…ô: Excel faylƒ± g√∂nd…ôril…ôc…ôk.\nYox: Ana menyuya qayƒ±dacaqsƒ±nƒ±z.",
        reply_markup=get_export_prompt_buttons(context.user_data.get('last_action')),
        reply_to_message_id=update.effective_message.message_id
    )

# Pe≈ü…ôy…ô g√∂r…ô h…ôkiml…ôri se√ßm…ôk (D…ôyi≈üilm…ôyib)
async def select_specialty(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("select_specialty funksiyasƒ± √ßaƒüƒ±rƒ±ldƒ±.")

    try:
        with oracledb.connect(user=username, password=password, dsn=dsn) as conn:
            query = """
                SELECT PU_ID, PU_UNVAN
                FROM FONETHBYSADM.H_PUNVAN
                WHERE PU_ID IN (
                    90, 95, 96, 108, 114, 117, 3, 6, 7, 9, 17, 19, 22, 23, 25,
                    26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
                    41, 42, 43, 44, 45, 49, 60, 62, 63, 65, 66, 98, 118, 121, 125, 133, 127, 123, 126
                )
                ORDER BY PU_UNVAN
            """
            specialties_df = pd.read_sql(query, con=conn)
            specialties = specialties_df.to_dict('records')

            if not specialties:
                logger.warning("He√ß bir pe≈ü…ô tapƒ±lmadƒ±.")
                await update.effective_chat.send_message(
                    "‚ö†Ô∏è He√ß bir pe≈ü…ô tapƒ±lmadƒ±.\nN√∂vb…ôti addƒ±m: Ana menyudan yeni bir se√ßim edin.",
                    reply_markup=get_return_main_menu_button(),
                    reply_to_message_id=update.effective_message.message_id
                )
                return MAIN_MENU

            await update.effective_chat.send_message(
                "üë®‚Äç‚öïÔ∏è Pe≈ü…ôy…ô g√∂r…ô h…ôkim statistikasƒ±nƒ± g√∂rm…ôk √º√ß√ºn bir pe≈ü…ô se√ßin:\nN√∂vb…ôti addƒ±m: A≈üaƒüƒ±dakƒ± pe≈ü…ôl…ôrd…ôn birini se√ßin.",
                reply_markup=get_specialty_buttons(specialties),
                reply_to_message_id=update.effective_message.message_id
            )
            context.user_data['specialties'] = specialties
            logger.info(f"Pe≈ü…ôl…ôr g√∂st…ôrildi: {[s['PU_UNVAN'] for s in specialties]}")
            return SELECT_SPECIALTY

    except Exception as e:
        logger.error(f"select_specialty x…ôtasƒ±: {e}")
        await update.effective_chat.send_message(
            f"X…ôta ba≈ü verdi: {e}\nN√∂vb…ôti addƒ±m: Ana menyudan yeni bir se√ßim edin.",
            reply_markup=get_return_main_menu_button(),
            reply_to_message_id=update.effective_message.message_id
        )
        return MAIN_MENU

# D√ºym…ôl…ôr…ô basƒ±ldƒ±qda callback handler (D√úZ∆èLƒ∞≈ûL∆èR)
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    logger.info(f"Button pressed: {query.data}, chat_id: {update.effective_chat.id}, message_id: {query.message.message_id}")
    await query.answer()

    # category_names l√ºƒü…ôtini burada t…ôyin edirik ki, lazƒ±m olan yerl…ôrd…ô istifad…ô olunsun.
    category_names = {
        'eden_ayaktan': 'Eden Ayaktan', 'eden_yatan': 'Eden Yatan',
        'gonderen_ayaktan': 'G√∂nd…ôr…ôn Ayaktan', 'gonderen_yatan': 'G√∂nd…ôr…ôn Yatan',
        'lab_gonderen_ayaktan': 'Laboratoriya G√∂nd…ôr…ôn Ayaktan', 'lab_gonderen_yatan': 'Laboratoriya G√∂nd…ôr…ôn Yatan',
        'specialty': '√úmumi Statistika'
    }

    top10_categories = {
        'menu_top10_eden_ayaktan': 'eden_ayaktan',
        'menu_top10_eden_yatan': 'eden_yatan',
        'menu_top10_gonderen_ayaktan': 'gonderen_ayaktan',
        'menu_top10_gonderen_yatan': 'gonderen_yatan',
        'menu_top10_lab_ayaktan': 'lab_gonderen_ayaktan',
        'menu_top10_lab_yatan': 'lab_gonderen_yatan'
    }

    stat_types = {
        'stat_eden_ayaktan': 'eden_ayaktan',
        'stat_eden_yatan': 'eden_yatan',
        'stat_gonderen_ayaktan': 'gonderen_ayaktan',
        'stat_gonderen_yatan': 'gonderen_yatan',
        'stat_lab_gonderen_ayaktan': 'lab_gonderen_ayaktan',
        'stat_lab_gonderen_yatan': 'lab_gonderen_yatan',
        'stat_umumi': 'specialty'
    }

    try:
        if query.data == 'menu_stats':
            # 1. F…ôrdi H…ôkim: ƒ∞ndi …ôvv…ôlc…ô Tarix Aralƒ±ƒüƒ± soru≈üulur.
            context.user_data.clear()
            context.user_data['kodlar'] = []
            context.user_data['adlar'] = []
            context.user_data['last_action'] = 'manual' # F…ôrdi axtarƒ±≈ü rejimind…ô olduƒüumuzu qeyd edirik
            
            await query.message.reply_text(
                "üìÖ Z…ôhm…ôt olmasa, f…ôrdi statistika √º√ß√ºn **tarix aralƒ±ƒüƒ±nƒ± se√ßin**:\nN√∂vb…ôti addƒ±m: 3 aylƒ±q, 6 aylƒ±q v…ô ya 1 illik se√ßim edin.",
                reply_markup=get_date_range_buttons(),
                reply_to_message_id=query.message.message_id
            )
            return SELECT_DATE_RANGE
            
        elif query.data == 'menu_date':
            # 2. Tarix…ô G√∂r…ô Analiz: ƒ∞stifad…ô√ßini geri g√∂nd…ôririk.
            await query.message.reply_text(
                "‚ö†Ô∏è Tarix aralƒ±ƒüƒ±nƒ± bu menyudan m√ºst…ôqil se√ß…ô bilm…ôzsiniz. Z…ôhm…ôt olmasa, …ôvv…ôlc…ô **'TOP 10'**, **'F…ôrdi Statistikalar'** v…ô ya **'Pe≈ü…ôy…ô G√∂r…ô H…ôkiml…ôr'** b√∂lm…ôsini se√ßin.",
                reply_markup=get_return_main_menu_button(),
                reply_to_message_id=query.message.message_id
            )
            return MAIN_MENU
            
        elif query.data in top10_categories:
            # 3. TOP 10 Se√ßimi: Pe≈ü…ô Se√ßimin…ô ke√ßid.
            context.user_data.clear()
            context.user_data['kodlar'] = []
            context.user_data['adlar'] = []
            context.user_data['top10_category'] = top10_categories[query.data]
            context.user_data['last_action'] = 'top10'
            await query.message.reply_text(
                "üë®‚Äç‚öïÔ∏è TOP 10 h…ôkiml…ôr √º√ß√ºn pe≈ü…ô se√ßin:\nN√∂vb…ôti addƒ±m: Pe≈ü…ôl…ôrd…ôn birini se√ß…ôc…ôksiniz.",
                reply_to_message_id=query.message.message_id
            )
            return await select_specialty(update, context)
            
        elif query.data == 'menu_specialty':
            # 4. Pe≈ü…ôy…ô G√∂r…ô H…ôkiml…ôr: Pe≈ü…ô Se√ßimin…ô ke√ßid.
            context.user_data.clear()
            context.user_data['kodlar'] = []
            context.user_data['adlar'] = []
            context.user_data.pop('top10_category', None)
            context.user_data['last_action'] = 'specialty'
            
            await query.message.reply_text(
                "üë®‚Äç‚öïÔ∏è Pe≈ü…ôl…ôr y√ºkl…ônir, z…ôhm…ôt olmasa g√∂zl…ôyin...\nN√∂vb…ôti addƒ±m: Pe≈ü…ôl…ôrd…ôn birini se√ß…ôc…ôksiniz.",
                reply_to_message_id=query.message.message_id
            )
            return await select_specialty(update, context)
            
        # --- X√ºsusi d√ºym…ôl…ôr ---
        elif query.data == 'menu_passive':
            # ‚ùå Passiv H…ôkiml…ôr: Xarici link…ô y√∂nl…ôndirir
            keyboard = [[InlineKeyboardButton("Yeni Bota Ke√ßid", url=PASSIVE_DOCTOR_LINK)]]
            await query.message.reply_text(
                "‚ùå Passiv H…ôkiml…ôr siyahƒ±sƒ±na baxmaq √º√ß√ºn dig…ôr botun olduƒüu qrupa y√∂nl…ôndir…ôm:",
                reply_markup=InlineKeyboardMarkup(keyboard),
                reply_to_message_id=query.message.message_id
            )
            return MAIN_MENU
            
        elif query.data == 'menu_excel':
            # Export √º√ß√ºn m…ôlumat yoxlanƒ±lƒ±r
            if not context.user_data.get('kodlar') and not context.user_data.get('specialty_df'):
                await query.message.reply_text(
                    "‚ö†Ô∏è ∆èvv…ôlc…ô bir statistika hazƒ±rlayƒ±n (F…ôrdi, TOP 10 v…ô ya Pe≈ü…ô), sonra Excel faylƒ±nƒ± ixrac edin.",
                    reply_markup=get_return_main_menu_button(),
                    reply_to_message_id=query.message.message_id
                )
                return MAIN_MENU
            
            await query.message.reply_text(
                "üìä Excel faylƒ± hazƒ±rlanƒ±r, z…ôhm…ôt olmasa g√∂zl…ôyin...",
                reply_to_message_id=query.message.message_id
            )
            await export_to_excel(update, context)
            return MAIN_MENU
            
        elif query.data == 'menu_reset' or query.data == 'return_main_menu':
            # üîÅ Yeni Se√ßim / Ana menyuya qayƒ±t
            context.user_data.clear()
            context.user_data['kodlar'] = []
            context.user_data['adlar'] = []
            await query.message.reply_text(
                "‚úÖ Ana menyuya qayƒ±dƒ±rsƒ±nƒ±z.\nN√∂vb…ôti addƒ±m: A≈üaƒüƒ±dakƒ± menyudan bir se√ßim edin.",
                reply_markup=get_main_menu(),
                reply_to_message_id=query.message.message_id
            )
            return MAIN_MENU
        
        elif query.data.startswith('specialty_'):
            # 5. Pe≈ü…ô Se√ßimi (TOP 10 v…ô ya Pe≈ü…ô Stat): Tarix Aralƒ±ƒüƒ±na Ke√ßid.
            pu_id = query.data[len('specialty_'):]
            specialty_name = next((s['PU_UNVAN'] for s in context.user_data.get('specialties', []) if str(s['PU_ID']) == pu_id), pu_id)
            context.user_data['specialty_id'] = pu_id
            context.user_data['specialty_name'] = specialty_name
            action_type = "TOP 10" if context.user_data.get('last_action') == 'top10' else "statistika"

            await query.message.reply_text(
                f"üìÖ {specialty_name} pe≈ü…ôsi √º√ß√ºn {action_type} **tarix aralƒ±ƒüƒ±nƒ± se√ßin**:\nN√∂vb…ôti addƒ±m: 3 aylƒ±q, 6 aylƒ±q v…ô ya 1 illik se√ßim edin.",
                reply_markup=get_date_range_buttons(),
                reply_to_message_id=query.message.message_id
            )
            return SELECT_DATE_RANGE
        
        elif query.data in ['date_3m', 'date_6m', 'date_1y']:
            # 6. Tarix Aralƒ±ƒüƒ± Se√ßimi: N…ôtic…ôy…ô/N√∂vb…ôti Addƒ±ma Ke√ßid
            days = {'date_3m': 90, 'date_6m': 180, 'date_1y': 365}
            context.user_data['date_range'] = days[query.data]
            end = datetime.now()
            start = end - timedelta(days=days[query.data])
            context.user_data['start_date'] = start.strftime('%d.%m.%Y')
            context.user_data['end_date'] = end.strftime('%d.%m.%Y')
            logger.info(f"Tarix aralƒ±ƒüƒ± se√ßildi: {days[query.data]} g√ºn. Action: {context.user_data.get('last_action')}")

            if context.user_data.get('last_action') == 'manual' or context.user_data.get('last_action') == 'manual_reselect_date':
                # F…ôrdi (manual) axtarƒ±≈ü
                
                if context.user_data.get('last_action') == 'manual_reselect_date' and context.user_data.get('kodlar'):
                    # T…ôkrar tarix se√ßimi sonrasƒ± birba≈üa qrafik hazƒ±rlama
                    await query.message.reply_text(
                        "üìä Yeni tarix aralƒ±ƒüƒ± √º√ß√ºn statistikalar hazƒ±rlanƒ±r, z…ôhm…ôt olmasa g√∂zl…ôyin...",
                        reply_to_message_id=query.message.message_id
                    )
                    context.user_data['last_action'] = 'manual' # Normal manual rejim…ô qayƒ±dƒ±rƒ±q
                    await generate_graph(update, context) 
                    return EXPORT_PROMPT
                
                else: # Bu, menu_stats'dan sonra ilk tarix se√ßimidir.
                    await query.message.reply_text(
                        f"üîç H…ôkim statistikasƒ± (Cari tarix aralƒ±ƒüƒ±: {context.user_data['start_date']} - {context.user_data['end_date']}) √º√ß√ºn **h…ôkimin adƒ±nƒ±, soyadƒ±nƒ± v…ô ya P_KODU-nu g√∂nd…ôrin**:\n"
                        "N√∂vb…ôti addƒ±m: H…ôkim m…ôlumatlarƒ±nƒ± daxil edin.",
                        reply_to_message_id=query.message.message_id
                    )
                    return ASK_DOCTOR

            elif context.user_data.get('last_action') == 'top10':
                # TOP 10 funksiyasƒ±nƒ± √ßaƒüƒ±r (Pe≈ü…ô v…ô Tarix artƒ±q se√ßilib)
                category_name = top10_categories.get(context.user_data.get('top10_category'), 'H…ôkim')
                await query.message.reply_text(
                    f"üèÜ TOP 10 {category_name} H…ôkim siyahƒ±sƒ± hazƒ±rlanƒ±r, z…ôhm…ôt olmasa g√∂zl…ôyin...",
                    reply_to_message_id=query.message.message_id
                )
                await top_10_doctors(update, context)
                return EXPORT_PROMPT
            
            elif context.user_data.get('last_action') == 'specialty':
                # Pe≈ü…ô statistikasƒ±nƒ±n n√∂v√ºn√º soru≈ü
                await query.message.reply_text(
                    f"üìä {context.user_data.get('specialty_name', 'Pe≈ü…ô')} statistikasƒ± √º√ß√ºn hansƒ± statistik n√∂v√ºn√º se√ßm…ôk ist…ôyirsiniz?",
                    reply_markup=get_stat_type_buttons(),
                    reply_to_message_id=query.message.message_id
                )
                return SELECT_STAT_TYPE
            
            else:
                await query.message.reply_text(
                    "‚ö†Ô∏è ∆èvv…ôlc…ô bir kateqoriya (TOP 10, F…ôrdi v…ô ya Pe≈ü…ô) se√ßin.",
                    reply_markup=get_return_main_menu_button(),
                    reply_to_message_id=query.message.message_id
                )
                return MAIN_MENU
        
        # --- F…ôrdi Axtarƒ±≈üdan Sonra Tarix D…ôyi≈üikliyi ---
        elif query.data == 'back_to_date_range_manual':
            # F…ôrdi (manual) axtarƒ±≈üdan sonra tarix d…ôyi≈üm…ôy…ô qayƒ±t
            if context.user_data.get('last_action') == 'manual' and context.user_data.get('kodlar'):
                context.user_data['last_action'] = 'manual_reselect_date' # Yeni v…ôziyy…ôt qeyd edilir
                
                await query.message.reply_text(
                    f"üìÖ Se√ßilmi≈ü h…ôkiml…ôr ({', '.join(context.user_data['adlar'])}) √º√ß√ºn yeni tarix aralƒ±ƒüƒ±nƒ± se√ßin:",
                    reply_markup=get_date_range_buttons(),
                    reply_to_message_id=query.message.message_id
                )
                return SELECT_DATE_RANGE
            else:
                await query.message.reply_text(
                    "‚ö†Ô∏è Tarix aralƒ±ƒüƒ±nƒ± d…ôyi≈üm…ôk √º√ß√ºn …ôvv…ôlc…ô F…ôrdi Statistikalar se√ßimi il…ô …ôn az bir h…ôkim …ôlav…ô edin.",
                    reply_markup=get_return_main_menu_button(),
                    reply_to_message_id=query.message.message_id
                )
                return MAIN_MENU

        # --- Dig…ôr M…ôrh…ôl…ôl…ôr (D…ôyi≈üilm…ôyib) ---
        elif query.data == 'continue_yes':
            await query.message.reply_text(
                "üîç Yeni h…ôkim axtarƒ±≈üƒ± √º√ß√ºn ad, soyad v…ô ya P_KODU daxil edin:\nN√∂vb…ôti addƒ±m: H…ôkim m…ôlumatlarƒ±nƒ± daxil edin.",
                reply_to_message_id=query.message.message_id
            )
            return ASK_DOCTOR
        elif query.data == 'continue_no':
            if not context.user_data.get('kodlar'):
                await query.message.reply_text(
                    "‚ö†Ô∏è He√ß bir h…ôkim se√ßilm…ôyib. ∆èvv…ôlc…ô h…ôkim …ôlav…ô edin.",
                    reply_to_message_id=query.message.message_id
                )
                return ASK_DOCTOR
            await query.message.reply_text(
                "üìä Statistikalar hazƒ±rlanƒ±r, z…ôhm…ôt olmasa g√∂zl…ôyin...",
                reply_to_message_id=query.message.message_id
            )
            await generate_graph(update, context) # generate_graph EXPORT_PROMPT-…ô ke√ßir
            return EXPORT_PROMPT
        elif query.data == 'export_yes':
            await query.message.reply_text(
                "üìä Excel faylƒ± hazƒ±rlanƒ±r, z…ôhm…ôt olmasa g√∂zl…ôyin...",
                reply_to_message_id=query.message.message_id
            )
            await export_to_excel(update, context)
            return MAIN_MENU
        
        # Pe≈ü…ô statistikasƒ± geri qayƒ±t d√ºym…ôl…ôri
        elif query.data == 'back_to_date_range':
            context.user_data.pop('start_date', None)
            context.user_data.pop('end_date', None)
            context.user_data.pop('date_range', None)
            action_type = "TOP 10" if context.user_data.get('last_action') == 'top10' else "statistika"
            await query.message.reply_text(
                f"üìÖ {context.user_data.get('specialty_name', 'Pe≈ü…ô')} pe≈ü…ôsi √º√ß√ºn {action_type} tarix aralƒ±ƒüƒ±nƒ± se√ßin:\nN√∂vb…ôti addƒ±m: 3 aylƒ±q, 6 aylƒ±q v…ô ya 1 illik se√ßim edin.",
                reply_markup=get_date_range_buttons(),
                reply_to_message_id=query.message.message_id
            )
            return SELECT_DATE_RANGE
        elif query.data == 'back_to_specialty':
            context.user_data.pop('specialty_id', None)
            context.user_data.pop('specialty_name', None)
            context.user_data.pop('start_date', None)
            context.user_data.pop('end_date', None)
            context.user_data.pop('date_range', None)
            await query.message.reply_text(
                "üë®‚Äç‚öïÔ∏è Pe≈ü…ôl…ôr y√ºkl…ônir, z…ôhm…ôt olmasa g√∂zl…ôyin...\nN√∂vb…ôti addƒ±m: Pe≈ü…ôl…ôrd…ôn birini se√ß…ôc…ôksiniz.",
                reply_to_message_id=query.message.message_id
            )
            return await select_specialty(update, context)

        elif query.data.startswith('select_doctor_'):
            # H…ôkim se√ßimi tamamlananda (t…ôk v…ô ya √ßoxlu axtarƒ±≈üdan sonra)
            kod = query.data[len('select_doctor_'):]
            df = context.user_data.get('search_list')
            hekim_adi = df[df['P_KODU'] == kod]['HEKIM_ADI'].values[0]
            context.user_data['kodlar'].append(kod)
            context.user_data['adlar'].append(hekim_adi)
            del context.user_data['search_list']
            await query.message.reply_text(f"‚úÖ {hekim_adi} …ôlav…ô edildi.")
            await query.message.reply_text(
                "Ba≈üqa h…ôkim …ôlav…ô etm…ôk ist…ôyirsiniz?\nN√∂vb…ôti addƒ±m: H…ô se√ßs…ôniz yeni h…ôkim …ôlav…ô ed…ô, Yox se√ßs…ôniz statistikalarƒ± g√∂r…ô bil…ôrsiniz.",
                reply_markup=get_continue_buttons(context.user_data['last_action']),
                reply_to_message_id=query.message.message_id
            )
            return CONTINUE_DOCTOR

        elif query.data in stat_types:
            # 7. Pe≈ü…ô Statistikasƒ±nƒ±n N√∂v√º Se√ßimi: Qrafik v…ô N…ôtic…ô
            stat_type = stat_types[query.data]
            
            try:
                with oracledb.connect(user=username, password=password, dsn=dsn) as conn:
                    if 'start_date' not in context.user_data or 'specialty_id' not in context.user_data:
                        raise ValueError("Tarix aralƒ±ƒüƒ± v…ô ya pe≈ü…ô se√ßilm…ôyib.")

                    df = pd.read_sql(query_template_specialty, con=conn, params={
                        "pu_id": int(context.user_data['specialty_id']),
                        "start_date": context.user_data['start_date'],
                        "end_date": context.user_data['end_date']
                    })

                    if df.empty:
                        raise ValueError("M…ôlumat tapƒ±lmadƒ±.")

                    context.user_data['specialty_df'] = df
                    
                    await query.message.reply_text(
                        f"üìä {context.user_data['specialty_name']} pe≈ü…ôsi √º√ß√ºn {category_names[stat_type]} statistikalarƒ± hazƒ±rlanƒ±r, z…ôhm…ôt olmasa g√∂zl…ôyin...",
                        reply_to_message_id=query.message.message_id
                    )
                    await generate_specialty_graph(update, context, stat_type)
                    return EXPORT_PROMPT

            except ValueError as ve:
                await query.message.reply_text(
                    f"‚ö†Ô∏è {context.user_data.get('specialty_name', 'Pe≈ü…ô')} √º√ß√ºn m…ôlumat tapƒ±lmadƒ±: {category_names.get(stat_type)}.\nN√∂vb…ôti addƒ±m: Ba≈üqa bir statistik n√∂v√º se√ßin.",
                    reply_markup=get_stat_type_buttons(),
                    reply_to_message_id=query.message.message_id
                )
                return SELECT_STAT_TYPE
            except Exception as e:
                logger.error(f"Pe≈ü…ô statistikasƒ± alƒ±nark…ôn √ºmumi x…ôta: {e}")
                await query.message.reply_text(
                    f"X…ôta ba≈ü verdi: {e}\nN√∂vb…ôti addƒ±m: Ba≈üqa bir pe≈ü…ô se√ßin v…ô ya ana menyuya qayƒ±dƒ±n.",
                    reply_markup=get_specialty_buttons(context.user_data.get('specialties', [])),
                    reply_to_message_id=query.message.message_id
                )
                return SELECT_SPECIALTY


    except Exception as e:
        logger.error(f"button_handler x…ôtasƒ±: {e}")
        await query.message.reply_text(
            f"X…ôta ba≈ü verdi: {e}\nZ…ôhm…ôt olmasa, ana menyudan yeni bir se√ßim edin.",
            reply_markup=get_return_main_menu_button(),
            reply_to_message_id=query.message.message_id
        )
        return MAIN_MENU

# H…ôkim sorƒüusu
async def ask_doctor(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    search_input = text
    
    start_date = context.user_data.get('start_date')
    end_date = context.user_data.get('end_date')
    days = context.user_data.get('date_range', 365) 

    logger.info(f"H…ôkim axtarƒ±≈üƒ±: {search_input}, Tarix aralƒ±ƒüƒ±: {start_date} - {end_date}, chat_id: {update.effective_chat.id}")

    await update.effective_chat.send_message(
        f"üìÖ Axtarƒ±≈ü tarix aralƒ±ƒüƒ±: {start_date} - {end_date} ({days} g√ºn)\n"
        "N√∂vb…ôti addƒ±m: H…ôkim tapƒ±ldƒ±qdan sonra daha √ßox h…ôkim …ôlav…ô ed…ô v…ô ya statistikalarƒ± g√∂r…ô bil…ôrsiniz.",
        reply_to_message_id=update.message.message_id
    )

    try:
        with oracledb.connect(user=username, password=password, dsn=dsn) as conn:
            query_list = f"""
                SELECT P_KODU, P_AD || ' ' || P_SOYAD AS HEKIM_ADI
                FROM FONETHBYSADM.H_PERSON
                WHERE LOWER(P_AD || ' ' || P_SOYAD) LIKE LOWER('%{search_input}%') OR LOWER(P_KODU) = LOWER('{search_input}')
            """
            df = pd.read_sql(query_list, con=conn)

            if df.empty:
                await update.effective_chat.send_message(
                    "He√ß bir uyƒüun h…ôkim tapƒ±lmadƒ±. Yenid…ôn ad, soyad v…ô ya P_KODU g√∂nd…ôrin:\nN√∂vb…ôti addƒ±m: Doƒüru h…ôkim m…ôlumatlarƒ±nƒ± daxil edin.",
                    reply_to_message_id=update.message.message_id
                )
                logger.warning(f"H…ôkim tapƒ±lmadƒ±: {search_input}")
                return ASK_DOCTOR

            if len(df) > 1:
                keyboard = []
                for _, row in df.iterrows():
                    button_text = f"{row['HEKIM_ADI']} ({row['P_KODU']})"
                    callback_data = f"select_doctor_{row['P_KODU']}"
                    keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
                keyboard.append([InlineKeyboardButton("Ana menyuya qayƒ±t", callback_data='return_main_menu')])
                reply_markup = InlineKeyboardMarkup(keyboard)
                await update.effective_chat.send_message(
                    "Bir ne√ß…ô uyƒüun h…ôkim tapƒ±ldƒ±. Z…ôhm…ôt olmasa birini se√ßin:",
                    reply_markup=reply_markup,
                    reply_to_message_id=update.message.message_id
                )
                context.user_data['search_list'] = df
                logger.info(f"√áoxsaylƒ± h…ôkim tapƒ±ldƒ±: {len(df)}")
                return ASK_DOCTOR

            if len(df) == 1:
                kod = df.iloc[0]['P_KODU']
                hekim_adi = df.iloc[0]['HEKIM_ADI']
                context.user_data['kodlar'].append(kod)
                context.user_data['adlar'].append(hekim_adi)
                await update.effective_chat.send_message(f"‚úÖ {hekim_adi} …ôlav…ô edildi.")
                await update.effective_chat.send_message(
                    "Ba≈üqa h…ôkim …ôlav…ô etm…ôk ist…ôyirsiniz?\nN√∂vb…ôti addƒ±m: H…ô se√ßs…ôniz yeni h…ôkim …ôlav…ô ed…ô, Yox se√ßs…ôniz statistikalarƒ± g√∂r…ô bil…ôrsiniz.",
                    reply_markup=get_continue_buttons(context.user_data['last_action']),
                    reply_to_message_id=update.message.message_id
                )
                logger.info(f"H…ôkim …ôlav…ô edildi: {hekim_adi}")
                return CONTINUE_DOCTOR
                
    except Exception as e:
        logger.error(f"ask_doctor x…ôtasƒ±: {e}")
        await update.effective_chat.send_message(
            f"X…ôta ba≈ü verdi: {e}\nN√∂vb…ôti addƒ±m: Yenid…ôn c…ôhd edin v…ô ya ana menyudan davam edin.",
            reply_markup=get_return_main_menu_button(),
            reply_to_message_id=update.message.message_id
        )
        return ASK_DOCTOR

# ∆èsas proqram
if __name__ == '__main__':
    app = ApplicationBuilder().token(bot_token).build()

    # /start komandasƒ±nƒ± i≈ü…ô salƒ±r
    app.add_handler(CommandHandler("start", start))
    
    # B√ºt√ºn d√ºym…ô klikl…ôrini idar…ô edir
    app.add_handler(CallbackQueryHandler(button_handler))
    
    # ASK_DOCTOR m…ôrh…ôl…ôsind…ô daxil edil…ôn m…ôtn mesajlarƒ±nƒ± idar…ô edir.
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, ask_doctor))

    # Botu i≈ü…ô sal
    logger.info("Bot i≈ü…ô salƒ±ndƒ±...")
    app.run_polling(poll_interval=1.0)